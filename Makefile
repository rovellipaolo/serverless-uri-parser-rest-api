AWS_REGION := eu-west-1
stage ?= v1
apigateway ?= uriparser-api-$(stage)-apigateway
lambda ?= Parse
s3bucket ?= uriparser-api-$(stage)-storage
version ?= 1.0


# Build:

.PHONY: build
build:
	@which pipenv || pip3 install pipenv
	@pipenv install --dev

.PHONY: install-serverless
install-serverless:
	@which serverless || npm install -g serverless@3.38.0
	@sls plugin install -n serverless-apigateway-service-proxy
#	@sls plugin install -n serverless-offline
	@sls plugin install -n serverless-plugin-log-retention
	@sls plugin install -n serverless-python-requirements
	@sls plugin install -n @kakkuk/serverless-aws-apigateway-documentation

.PHONY: generate-checkstyle-config
generate-checkstyle-config:
	@pipenv run pylint --generate-rcfile > .pylintrc

.PHONY: install-checkstyle-githooks
install-checkstyle-githooks:
	@pip3 install pre-commit
	pre-commit install

.PHONY: uninstall-checkstyle-githooks
uninstall-checkstyle-githooks:
	pre-commit uninstall


# Test:

.PHONY: test
test:
	@pipenv run python3 -m unittest

.PHONY: test-coverage
test-coverage:
	@pipenv run coverage3 run --branch --source=. --omit="tests/*" --data-file=".coverage" -m unittest
	@pipenv run coverage3 xml --data-file=".coverage" -o "coverage.xml"
	@pipenv run coverage3 report --data-file=".coverage" --show-missing

.PHONY: test-debug
test-debug:
	@pipenv run python3 -m pdb -m unittest

.PHONY: checkstyle
checkstyle:
	@pipenv run pycodestyle --max-line-length=120 src/ tests/
	@pipenv run pylint src/ tests/


# Run locally (outside AWS)

.PHONY: generate-openapi
generate-openapi:
	@sls generateDocumentation --stage $(stage) --param "version=$(version)" --outputFileName openapi/autogenerated.json --exportType oas30

.PHONY: validate
validate:
	@sls doctor

.PHONY: run-dev
run-dev:
	@sls offline start


# AWS:

.PHONY: download-openapi
download-openapi:
#	@aws s3api get-object --bucket $(s3bucket) --key openapi.json --region ${AWS_REGION} openapi/downloaded.json
	@sls downloadDocumentation --stage $(stage) --param "version=$(version)" --outputFileName openapi/downloaded.json --exportType oas30 \
		--extensions integrations --extensions apigateway --extensions authorizers

.PHONY: upload-openapi
upload-openapi:
	@make generate-openapi
	@aws s3api put-object --bucket $(s3bucket) --key openapi.json --region ${AWS_REGION} --body openapi/autogenerated.json | grep -oP '(?<="VersionId":\s").+(?=")'

.PHONY: deploy
deploy:
	@sls deploy --stage $(stage) --param "version=$(version)" --region ${AWS_REGION} --verbose
	@make upload-openapi s3bucket=$(s3bucket)
	@make redeploy-apigateway stage=$(stage) apigateway=$(apigateway)

.PHONY: get-apigateway-deployment
get-apigateway-deployment:
	@aws apigateway get-rest-apis --region ${AWS_REGION} --query "items[?name == '$(apigateway)']"

.PHONY: redeploy-apigateway
redeploy-apigateway:
	export AWS_REST_API_ID=$(shell aws apigateway get-rest-apis --region ${AWS_REGION} --query "items[?name == '$(apigateway)'].id | [0]"); \
	aws apigateway create-deployment --region ${AWS_REGION} --rest-api-id $$AWS_REST_API_ID --stage-name $(stage) --description "URI Parser REST API deployment"

.PHONY: show-logs
show-logs:
	@sls logs --stage $(stage) --param "version=$(version)" --region ${AWS_REGION} --function $(lambda)

.PHONY: delete
delete:
	@sls remove --stage $(stage) --param "version=$(version)" --region ${AWS_REGION} --verbose
	@aws s3 rb s3://$(s3bucket) --region ${AWS_REGION} --force
